CNN
--------------------------------------------------------------------------------------------------------------
from google.colab import drive
drive.mount('/content/drive')
--------------------------------------------------------------------------------------------------------------
import os
import numpy as np
import cv2
from sklearn.model_selection import train_test_split

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Define your dataset directory
dataset_dir = '/content/drive/MyDrive/minar project dataset/train'

# Define image size
image_height, image_width = 255,255

# Function to load and preprocess images
def load_images(dataset_dir):
    images = []
    labels = []
    for category in os.listdir(dataset_dir):
        category_dir = os.path.join(dataset_dir, category)
        label = 1 if category == 'fresh_apple' else 0  # Assign labels (0 or 1) based on folder names
        for img_name in os.listdir(category_dir):
            img_path = os.path.join(category_dir, img_name)
            img = cv2.imread(img_path)
            img = cv2.resize(img, (image_height, image_width))
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB
            img = img.astype('float32') / 255.0  # Normalize pixel values
            images.append(img)
            labels.append(label)
    return np.array(images), np.array(labels)

# Load and preprocess images
images, labels = load_images(dataset_dir)

# Split the dataset into training and testing sets
train_images, test_images, train_labels, test_labels = train_test_split(images, labels, test_size=0.2, random_state=42)


print(train_labels[1])
import matplotlib.pyplot as plt
plt.imshow(train_images[1])
plt.show()
------------------------------------------------------------------------------------------------------------------------
train_labels[:5]
------------------------------------------------------------------------------------------------------------------------

class_names = ['Stale', 'Fresh']

fig, axs = plt.subplots(3, 3, figsize=(12, 12))

for i in range(9):
    axs[i // 3, i % 3].imshow(train_images[i])
    axs[i // 3, i % 3].set_title(f"Class: {class_names[train_labels[i]]}")
    axs[i // 3, i % 3].axis('off')

plt.tight_layout()
plt.show()
-------------------------------------------------------------------------------------------------------------------------
num_channels=3
model2 = models.Sequential()

# Convolutional layers
model2.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(image_height, image_width, num_channels)))
model2.add(layers.MaxPooling2D((2, 2)))
model2.add(layers.Conv2D(64, (3, 3), activation='relu'))
model2.add(layers.MaxPooling2D((2, 2)))
model2.add(layers.Conv2D(128, (3, 3), activation='relu'))
model2.add(layers.MaxPooling2D((2, 2)))
model2.add(layers.Conv2D(128, (3, 3), activation='relu'))
model2.add(layers.MaxPooling2D((2, 2)))
model2.add(layers.Conv2D(128, (3, 3), activation='relu'))
model2.add(layers.MaxPooling2D((2, 2)))
model2.add(layers.Conv2D(128, (3, 3), activation='relu'))
model2.add(layers.MaxPooling2D((2, 2)))



# Flatten layer
model2.add(layers.Flatten())

# Dense layers
model2.add(layers.Dense(255, activation='relu'))
model2.add(layers.Dense(1, activation='sigmoid'))
-------------------------------------------------------------------------------------------------------------------------
model2.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
-------------------------------------------------------------------------------------------------------------------------
history=model2.fit(train_images, train_labels, epochs=50, validation_data=(train_images, train_labels))
-------------------------------------------------------------------------------------------------------------------------
test_loss, test_accuracy = model2.evaluate(test_images, test_labels)
------------------------------------------------------------------------------------------------------------------------

import matplotlib.pyplot as plt

def plot_training_history(history):
    fig, axs = plt.subplots(1, 2, figsize=(12, 6))

    # Plot training and validation accuracy values
    axs[0].plot(history.history['accuracy'], label='Training Accuracy')
    axs[0].plot(history.history['val_accuracy'], label='Validation Accuracy')
    axs[0].set_title('Training and Validation Accuracy')
    axs[0].set_xlabel('Epoch')
    axs[0].set_ylabel('Accuracy')
    axs[0].legend()

    # Plot training and validation loss values
    axs[1].plot(history.history['loss'], label='Training Loss')
    axs[1].plot(history.history['val_loss'], label='Validation Loss')
    axs[1].set_title('Training and Validation Loss')
    axs[1].set_xlabel('Epoch')
    axs[1].set_ylabel('Loss')
    axs[1].legend()

    plt.show()

# Plot training history
plot_training_history(history)
-------------------------------------------------------------------------------------------------------------------------
# Save in HDF5 format
model2.save('/content/drive/My Drive/CNN_model.h5')
-------------------------------------------------------------------------------------------------------------------------
import os
import numpy as np
import cv2
import random
import matplotlib.pyplot as plt
import tensorflow as tf

# Load the trained model
# model12 = tf.keras.models.load_model('/content/path/to/save/your/model2.h5')

# Define image size
image_height, image_width = 255, 255

# Function to preprocess input image(s)
def preprocess_image(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (image_height, image_width))
    img = img.astype('float32') / 255.0  # Normalize pixel values
    img = np.expand_dims(img, axis=0)  # Add batch dimension
    return img

# Directory containing dataset
dataset_dir = '/content/drive/MyDrive/minar project dataset/train'

# Get list of all image files in the dataset
image_files = []
for category in os.listdir(dataset_dir):
    category_dir = os.path.join(dataset_dir, category)
    image_files.extend([os.path.join(category_dir, file) for file in os.listdir(category_dir)])

# Choose a random image from the dataset
random_image_path = random.choice(image_files)

# Preprocess the random image
input_image = preprocess_image(random_image_path)

# Get prediction for the random image
predictions = model2.predict(input_image)
predicted_class = "Fresh" if predictions[0][0] > 0.5 else "Stale"  # Adjust based on your labels
confidence = predictions[0][0] if predicted_class == "Fresh" else (1 - predictions[0][0])  # Confidence score

# Display the random image along with its predicted class
img = cv2.imread(random_image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB for display
plt.imshow(img)
plt.title(f"Predicted class: {predicted_class}, Confidence: {confidence:.4f}")
plt.axis('off')
plt.show()
---------------------------------------------------------------------------------------------------------------------------
import os
import numpy as np
import cv2
import random
import matplotlib.pyplot as plt
import tensorflow as tf

# Load the trained model
# model12 = tf.keras.models.load_model('/content/path/to/save/your/model2.h5')

# Define image size
image_height, image_width = 255, 255

# Function to preprocess input image(s)
def preprocess_image(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (image_height, image_width))
    img = img.astype('float32') / 255.0  # Normalize pixel values
    img = np.expand_dims(img, axis=0)  # Add batch dimension
    return img

# Directory containing dataset
dataset_dir = '/content/drive/MyDrive/minar project dataset/train'

# Get list of all image files in the dataset
image_files = []
for category in os.listdir(dataset_dir):
    category_dir = os.path.join(dataset_dir, category)
    image_files.extend([os.path.join(category_dir, file) for file in os.listdir(category_dir)])

# Choose 9 random images from the dataset
random_image_paths = random.sample(image_files, 9)

# Create a subplot with 3 rows and 3 columns
fig, axs = plt.subplots(3, 3, figsize=(12, 12))

# Loop through each random image
for i, image_path in enumerate(random_image_paths):
    # Preprocess the image
    input_image = preprocess_image(image_path)

    # Get prediction for the image
    predictions = model2.predict(input_image)
    predicted_class = "Fresh" if predictions[0][0] > 0.5 else "Stale"  # Adjust based on your labels
    confidence = predictions[0][0] if predicted_class == "Fresh" else (1 - predictions[0][0])  # Confidence score

    # Display the image along with its predicted class
    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB for display
    axs[i // 3, i % 3].imshow(img)
    axs[i // 3, i % 3].set_title(f"Predicted class: {predicted_class}, Confidence: {confidence:.4f}")
    axs[i // 3, i % 3].axis('off')

plt.tight_layout()
plt.show()
----------------------------------------------------------------------------------------------------------------------------
